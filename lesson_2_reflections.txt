What happens when you initialize a repository? Why do you need to do it?
	
	A new Git repository is created so that you can start making commits, storing revisions when making changes

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area contains file changes that are about to be commited to repository, whereas the working directory has all the changes made to the repository. 
	Staging area adds an additional area to group changes for a commit, i.e. grouping logical changes to a commit

How can you use the staging area to make sure you have one commit per logical
change?
	
	You can select all file changes from the working directory to the staging area and group them before making a commit

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you starting doing things in parallel or experimenting something new, i.e. creating a new branch to develop a new feature while keeping the main branch, master, intact

How do the diagrams help you visualize the branch structure?

	Graph shows commits from different branches graphically so you can easily see how commits are structured in relation to others within the branch or in different branch. It's the equivalent of running git log on branch, but you don't have to run it on each branch separately.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Combining commits of 2 branches together with commits being reordered in the timeline they are commited. Representing the merging branches in a diagram will help us visualise the commits of 2 branches before making a commit

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Automatic merging is convenient when Git is able to tell how to merge changes together, though it's not necessarily it's always correct. Doing a manual merge is more time-consuming as you needs to figure out changes from the other branch and merge your changes in. However, it gives us the ability to decide the best way to resolve a conflict without involving guess work from Git.
